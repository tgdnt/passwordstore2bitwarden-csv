#!/usr/bin/env bash

# Treat missing variables and failed pipelines as errors
set -eu

# Read the store location from the first argument
# Use `realpath` to avoid potential symlink issues
# and normalize badly formatted paths
store_location="$(realpath "$1")" || {
  echo >&2 "Error: the first argument is missing or invalid"
  echo >&2 "Usage: $0 <passwords_directory>"
  exit 1
}

# A helper function for printing a CSV row
# Each column of the row is partially escaped
# The function ends the row with a new line
# TODO: remove newline insertion
print_cvs_row(){
  printf '"%s"' "$1"
  shift;
  printf ',"%s"' "$@"
  echo -n $'\n'
}

# column_order defines the order of the columns
columns_order=(
  "login_password"
  "folder"
  "favorite"
  "type"
  "name"
  "notes"
  "fields"
  "reprompt"
  "login_uri"
  "login_username"
)

# print the header row; there's no reason to edit this
print_cvs_row "${columns_order[@]}"

# Fallback to `find` if `fd` isn't present
if { command -v fd 2>&1; } >/dev/null; then
  find_command=(fd --glob --print0 '*.gpg' "$store_location")
else
  find_command=(find "$store_location" -name '*.gpg' -print0)
fi

# Find and iterate over all passwords
"${find_command[@]}" | while IFS= read -r -d '' filepath; do
  # Decrypt the password, and pre-escape it for the next step.
  # The pre-escaping is simply duplicating all quote (") characters.
  #
  # Details: In order to export all characters, including newlines and commas, the
  # columns must be escaped. Columns in CSV are escaped by surrounding them with
  # quotes, and duplicating the quotes.
  content="$(gpg -d "${filepath}" 2>/dev/null | sed 's/\"/\"\"/g')"

  # Each following parapgraph is associated with a column. the purpose of each paragraph is to extract the value for it's column and assign to a variable.
  #
  # $content is the decrypted content of the password file. the content may be used by the paragraphs to extract data for their coreesponding column. Any data left in $content is treated as a note and is assigned to the variable associated with the CSV notes column
  # Once extracted, the code may remove the extracted values from $content so they don't end up in
  # the notes.

  # Store the folder path (csv: folder)
  foldername="$(dirname "$(realpath --relative-to="$store_location" "$filepath")")"

  # Store the file name
  filename="$(basename "$filepath" .gpg)"

  # Extract the password (csv: login_password)
  if [[ -z "$content" ]]; then
    login_password=""
    echo "Password $folder/$filename appears to be empty"
  else
    login_password="$(echo -n "$content" | head -1)"
    # Remove the password from the decrypted content
    content="$(echo -e "$content" | sed '1d')"
  fi

  # Set the type to login (csv: type)
  type='login'

  # If there's no folder, set entry name from file name and Set the name of the entry to the folder name, if present, otherwise the file name
  if [[ "$foldername" == "." ]]; then
        name="$filename"
        login_username=''
  else
        name="$foldername"
        login_username="$filename"
  fi

  # get any url field
  login_uri=$(echo "$content" | grep ^url: | sed 's/url: //')

  # Keep the rest as fields, except type: login, and username
  fields=$(echo "$content" | sed '/^url:/d; /^type: login$/d; /^login:/d')

  # Leave other fields empty
  folder=''
  notes=''
  favorite=''
  reprompt=''

  # Construct a csv row in the order defined in $columns_order
  row=()
  for col in "${columns_order[@]}"; do
    case "$col" in
    "login_password") row+=("$login_password") ;;
    "folder") row+=("$folder") ;;
    "favorite") row+=("$favorite") ;;
    "type") row+=("$type") ;;
    "name") row+=("$name") ;;
    "notes") row+=("$notes") ;;
    "fields") row+=("$fields") ;;
    "reprompt") row+=("$reprompt") ;;
    "login_uri") row+=("$login_uri") ;;
    "login_username") row+=("$login_username") ;;
    *)
      echo >&2 "Error: Unreachable state"
      ;;
    esac
  done

  # Print the row
  print_cvs_row "${row[@]}"
done
